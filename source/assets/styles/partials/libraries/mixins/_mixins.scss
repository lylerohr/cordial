@import "constructor";

// @media breakpoints
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  }
  @else {
    @warn "No value could be retrieved from `#{$breakpoint}`";
  }
}


// BEM
@mixin element($name) {
  @at-root #{&}__#{$name} {
	  @content;
  }
}

@mixin modifier($name) {
  @at-root #{&}--#{$name} {
    @content;
  }
}

// Add pseudo class or element
@mixin pseudo-constructor($modifier) {
	@each $modifier-name, $modifier-value in $modifier {
		@if str-index($modifier-name, ":") {
			$pseudo-name: str-slice($modifier-name, 2);
			&:#{$pseudo-name} {
				@each $name, $value in map-get-deep($modifier, $modifier-name) {
					#{$name}: #{$value};
				}
			}
		}
	}
}

// Gradients
@mixin gradient-bg-linear($start-color, $end-color, $rotation: null) {
	background: $start-color;
	background: -webkit-linear-gradient(#{$rotation}deg, $start-color, $end-color);
	background: -o-linear-gradient(#{$rotation}deg, $start-color, $end-color);
	background: -moz-linear-gradient(#{$rotation}deg, $start-color, $end-color);
	background: linear-gradient(#{$rotation}deg, $start-color, $end-color);
}

@mixin line-clamp($lines, $height...) {
	display:-webkit-box;
	position: relative;
	-webkit-line-clamp: $lines;
	-webkit-box-orient: vertical;
	overflow: hidden;
	text-overflow: ellipsis;
	max-height: $height;
}

@mixin vertical-center {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
}

@mixin horizontal-center {
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
}

@mixin hv-center {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin clearfix {
	&::after {
		content: " ";
		display: table;
		clear: both;
	}
}

@mixin full-bleed-row {
	margin-left: -30px;
	margin-right: -30px;
}
